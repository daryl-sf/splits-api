{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Cookie": {
            "properties": {
                "domain": {
                    "description": "Specifies the value for the `Domain Set-Cookie` attribute.\nBy default, no domain is set, and most clients will consider the cookie to apply to only the current domain.",
                    "type": "string"
                },
                "expires": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Specifies the `Date` object to be the value for the `Expires Set-Cookie` attribute.\nBy default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\nIf both `expires` and `maxAge` are set in the options, then the last one defined in the object is what is used."
                },
                "httpOnly": {
                    "description": "Specifies the boolean value for the `HttpOnly Set-Cookie` attribute. When truthy, the `HttpOnly` attribute is set, otherwise it is not.\nBy default, the `HttpOnly` attribute is set.\n\nBe careful when setting this to `true`, as compliant clients will not allow client-side JavaScript to see the cookie in `document.cookie`.",
                    "type": "boolean"
                },
                "maxAge": {
                    "description": "Specifies the number (in milliseconds) to use when calculating the `Expires Set-Cookie` attribute.\nThis is done by taking the current server time and adding `maxAge` milliseconds to the value to calculate an `Expires` datetime. By default, no maximum age is set.\n\nIf both `expires` and `maxAge` are set in the options, then the last one defined in the object is what is used.\n`maxAge` should be preferred over `expires`.",
                    "type": "number"
                },
                "originalMaxAge": {
                    "description": "Returns the original `maxAge` (time-to-live), in milliseconds, of the session cookie.",
                    "type": [
                        "null",
                        "number"
                    ]
                },
                "path": {
                    "description": "Specifies the value for the `Path Set-Cookie` attribute.\nBy default, this is set to '/', which is the root path of the domain.",
                    "type": "string"
                },
                "sameSite": {
                    "description": "Specifies the boolean or string to be the value for the `SameSite Set-Cookie` attribute.\n- `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n- `false` will not set the `SameSite` attribute.\n- `lax` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n- `none` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.\n- `strict` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\n**Note:** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.",
                    "enum": [
                        false,
                        "lax",
                        "none",
                        "strict",
                        true
                    ]
                },
                "secure": {
                    "description": "Specifies the boolean value for the `Secure Set-Cookie` attribute. When truthy, the `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\nBe careful when setting this to true, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that `secure: true` is a **recommended option**.\nHowever, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies.\nIf `secure` is set, and you access your site over HTTP, **the cookie will not be set**.\n\nThe cookie.secure option can also be set to the special value `auto` to have this setting automatically match the determined security of the connection.\nBe careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP.\nThis is useful when the Express \"trust proxy\" setting is properly setup to simplify development vs production configuration.\n\nIf you have your node.js behind a proxy and are using `secure: true`, you need to set \"trust proxy\" in express. Please see the [README](https://github.com/expressjs/session) for details.\n\nPlease see the [README](https://github.com/expressjs/session) for an example of using secure cookies in production, but allowing for testing in development based on NODE_ENV.",
                    "enum": [
                        "auto",
                        false,
                        true
                    ]
                },
                "signed": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SessionData": {
            "description": "This interface allows you to declare additional properties on your session object using [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html).",
            "properties": {
                "cookie": {
                    "$ref": "#/definitions/Cookie"
                },
                "userId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserRequestBody": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserWithOutPassword": {
            "properties": {
                "confirmationToken": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "confirmed": {
                    "type": "boolean"
                },
                "confirmedAt": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "createdAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "updatedAt": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        }
    }
}

